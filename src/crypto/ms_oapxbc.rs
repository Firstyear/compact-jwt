use crate::compact::{JweAlg, JweCompact, JweEnc, JweProtectedHeader, ProtectedHeader};
use crate::jwe::Jwe;
use crate::JwtError;

use crate::traits::*;

use super::a256gcm::JweA256GCMEncipher;
use super::hs256::JwsHs256Signer;

use super::rsaes_oaep::{JweRSAOAEPDecipher, JweRSAOAEPEncipher};

use crate::jwe::JweBuilder;

use openssl::pkey::Private;
use openssl::pkey::Public;
use openssl::rsa::Rsa;

/// A [MS-OAPXBC] 3.2.5.1.2.2 yielded session key. This is used as a form of key agreement
/// for MS clients, where this key can now be used to encipher and decipher arbitrary
/// content. It may also be used for HS256 signatures for requests.
pub enum MsOapxbcSessionKey {
    /// An AES-256-GCM + HS256 session key
    A256GCM {
        /// The aes key for this session
        aes_key: JweA256GCMEncipher,
        /// the hmac key for this session
        hmac_key: JwsHs256Signer,
    },
}

impl MsOapxbcSessionKey {
    /// Given a public key, create a derived session key. This is the "server side"
    /// component for this process.
    pub fn begin_rsa_oaep_key_agreement(
        rsa_pub_key: Rsa<Public>,
    ) -> Result<(Self, JweCompact), JwtError> {
        /*
        let rsa_pub_key = PKey::from_rsa(value).map_err(|ossl_err| {
            debug!(?ossl_err);
            JwtError::OpenSSLError
        })?;
        */

        let rsa_oaep = JweRSAOAEPEncipher::try_from(rsa_pub_key)?;

        let aes_key = JweA256GCMEncipher::new_ephemeral()?;
        let hmac_key = JwsHs256Signer::try_from(aes_key.ms_oapxbc_key())?;

        // https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-oapxbc/d3f8893c-a715-412a-97d1-5ffed2c3b3d5
        // session_key_jwe does not seem to have many requirements?
        let jweb = JweBuilder::from(Vec::with_capacity(0)).build();

        let jwec = aes_key.encipher_inner(&rsa_oaep, &jweb)?;

        Ok((MsOapxbcSessionKey::A256GCM { aes_key, hmac_key }, jwec))
    }

    /// Given a session jwe, complete the session key derivation with this private key
    pub fn complete_rsa_oaep_key_agreement(
        rsa_priv_key: Rsa<Private>,
        jwec: &JweCompact,
    ) -> Result<Self, JwtError> {
        // May become a trait later?
        let rsa_oaep = JweRSAOAEPDecipher::try_from(rsa_priv_key)?;

        let unwrapped_key = rsa_oaep.unwrap_key(jwec)?;

        // May also need to make this output type a trait too, so we can store
        // this key in some secure way?

        match jwec.header.enc {
            JweEnc::A256GCM => {
                let aes_key = JweA256GCMEncipher::try_from(unwrapped_key.as_slice())?;
                let hmac_key = JwsHs256Signer::try_from(unwrapped_key.as_slice())?;

                Ok(MsOapxbcSessionKey::A256GCM { aes_key, hmac_key })
            }
            _ => Err(JwtError::CipherUnavailable),
        }
    }
}

impl MsOapxbcSessionKey {
    /// Given a JWE in compact form, decipher and authenticate its content.
    pub fn decipher(&self, jwec: &JweCompact) -> Result<Jwe, JwtError> {
        // Alg must be direct.
        if jwec.header.alg != JweAlg::DIRECT {
            return Err(JwtError::AlgorithmUnavailable);
        }

        match &self {
            MsOapxbcSessionKey::A256GCM { aes_key, .. } => {
                // Enc must be a256gcm
                if jwec.header.enc != JweEnc::A256GCM {
                    return Err(JwtError::CipherUnavailable);
                }

                aes_key.decipher_inner(jwec).map(|payload| Jwe {
                    header: jwec.header.clone(),
                    payload,
                })
            }
        }
    }

    /// Given a JWE, encipher its content to a compact form.
    pub fn encipher(&self, jwe: &Jwe) -> Result<JweCompact, JwtError> {
        let outer = JweDirect::default();

        match &self {
            MsOapxbcSessionKey::A256GCM { aes_key, .. } => aes_key.encipher_inner(&outer, jwe),
        }
    }
}

#[derive(Default)]
struct JweDirect {}

impl JweEncipherOuter for JweDirect {
    fn set_header_alg(&self, hdr: &mut JweProtectedHeader) -> Result<(), JwtError> {
        hdr.alg = JweAlg::DIRECT;
        Ok(())
    }

    fn wrap_key(&self, _key_to_wrap: &[u8]) -> Result<Vec<u8>, JwtError> {
        Ok(Vec::with_capacity(0))
    }
}

impl JwsSigner for MsOapxbcSessionKey {
    fn get_kid(&self) -> &str {
        match &self {
            MsOapxbcSessionKey::A256GCM { hmac_key, .. } => JwsSigner::get_kid(hmac_key),
        }
    }

    fn update_header(&self, header: &mut ProtectedHeader) -> Result<(), JwtError> {
        match &self {
            MsOapxbcSessionKey::A256GCM { hmac_key, .. } => hmac_key.update_header(header),
        }
    }

    fn sign<V: JwsSignable>(&self, jws: &V) -> Result<V::Signed, JwtError> {
        match &self {
            MsOapxbcSessionKey::A256GCM { hmac_key, .. } => hmac_key.sign(jws),
        }
    }
}

impl JwsVerifier for MsOapxbcSessionKey {
    fn get_kid(&self) -> Option<&str> {
        match &self {
            MsOapxbcSessionKey::A256GCM { hmac_key, .. } => JwsVerifier::get_kid(hmac_key),
        }
    }

    fn verify<V: JwsVerifiable>(&self, jwsc: &V) -> Result<V::Verified, JwtError> {
        match &self {
            MsOapxbcSessionKey::A256GCM { hmac_key, .. } => hmac_key.verify(jwsc),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::MsOapxbcSessionKey;
    use crate::compact::JweCompact;
    use crate::jwe::JweBuilder;
    use openssl::rsa::Rsa;

    use std::str::FromStr;

    #[test]
    fn ms_oapxbc_reflexive_test() {
        let _ = tracing_subscriber::fmt::try_init();

        let rsa_priv_key = Rsa::generate(2048).unwrap();
        let rsa_pub_key = Rsa::from_public_components(
            rsa_priv_key.n().to_owned().unwrap(),
            rsa_priv_key.e().to_owned().unwrap(),
        )
        .unwrap();

        let (server_key, jwec) =
            MsOapxbcSessionKey::begin_rsa_oaep_key_agreement(rsa_pub_key).unwrap();

        let client_key =
            MsOapxbcSessionKey::complete_rsa_oaep_key_agreement(rsa_priv_key, &jwec).unwrap();

        let input = vec![1; 256];
        let jweb = JweBuilder::from(input.clone()).build();

        let jwe_encrypted = client_key.encipher(&jweb).expect("Unable to encrypt.");

        // Decrypt with the partner.
        let decrypted = server_key
            .decipher(&jwe_encrypted)
            .expect("Unable to decrypt.");

        assert_eq!(decrypted.payload(), input);
    }

    #[test]
    fn ms_oapxbc_3_2_5_1_3_prt_request_response_1() {
        let _ = tracing_subscriber::fmt::try_init();

        let rsa_priv_key = Rsa::private_key_from_der(&[
            48, 130, 4, 163, 2, 1, 0, 2, 130, 1, 1, 0, 191, 143, 29, 122, 36, 141, 175, 52, 119,
            240, 95, 222, 55, 208, 8, 107, 72, 65, 77, 191, 241, 26, 139, 79, 181, 67, 75, 0, 18,
            44, 117, 3, 120, 150, 37, 29, 217, 197, 134, 61, 206, 186, 138, 129, 92, 66, 146, 137,
            240, 119, 57, 13, 24, 194, 133, 174, 131, 11, 50, 184, 174, 170, 99, 40, 217, 58, 200,
            202, 59, 179, 164, 199, 10, 27, 15, 74, 6, 67, 154, 209, 38, 53, 166, 148, 86, 109,
            119, 100, 79, 228, 116, 102, 159, 120, 226, 123, 225, 90, 242, 195, 29, 221, 120, 176,
            226, 91, 209, 179, 17, 201, 25, 34, 157, 139, 199, 152, 218, 25, 69, 144, 61, 239, 217,
            191, 223, 242, 94, 89, 180, 62, 148, 107, 106, 251, 96, 74, 23, 243, 145, 66, 164, 233,
            87, 19, 202, 19, 26, 104, 121, 25, 96, 118, 6, 229, 89, 243, 125, 253, 79, 149, 75,
            247, 162, 99, 59, 188, 182, 247, 8, 201, 246, 112, 26, 31, 119, 190, 254, 180, 84, 13,
            250, 50, 117, 236, 82, 31, 160, 223, 185, 220, 64, 118, 169, 64, 107, 54, 205, 141,
            145, 208, 144, 255, 214, 143, 17, 99, 204, 233, 59, 135, 208, 17, 46, 230, 148, 25,
            133, 46, 18, 129, 125, 41, 71, 129, 204, 43, 78, 180, 63, 148, 142, 8, 134, 52, 196,
            210, 186, 246, 120, 143, 7, 251, 205, 217, 156, 30, 70, 150, 218, 42, 84, 160, 177,
            231, 240, 119, 2, 3, 1, 0, 1, 2, 130, 1, 0, 28, 36, 174, 27, 126, 88, 84, 151, 220, 81,
            51, 252, 133, 109, 170, 118, 252, 144, 31, 152, 166, 23, 20, 197, 154, 167, 110, 210,
            237, 88, 155, 190, 109, 78, 125, 216, 131, 96, 170, 70, 213, 99, 1, 171, 92, 191, 41,
            33, 91, 243, 96, 45, 228, 231, 219, 85, 22, 202, 163, 226, 143, 66, 216, 59, 173, 162,
            157, 210, 92, 112, 25, 178, 230, 112, 176, 79, 219, 88, 190, 91, 161, 5, 251, 217, 202,
            82, 221, 218, 30, 132, 189, 119, 64, 81, 181, 208, 166, 124, 194, 178, 216, 229, 235,
            111, 237, 105, 185, 6, 218, 131, 149, 142, 72, 224, 58, 236, 97, 138, 153, 246, 69,
            171, 65, 238, 23, 60, 88, 17, 11, 120, 19, 5, 73, 125, 30, 54, 205, 1, 137, 165, 14,
            185, 105, 27, 121, 181, 105, 237, 137, 5, 121, 84, 155, 176, 108, 9, 113, 13, 195, 105,
            154, 208, 146, 179, 101, 83, 207, 21, 135, 23, 67, 34, 228, 209, 3, 110, 35, 31, 138,
            132, 90, 59, 21, 206, 60, 37, 75, 102, 101, 111, 142, 225, 46, 241, 145, 57, 105, 69,
            157, 43, 22, 16, 202, 172, 4, 103, 161, 232, 151, 228, 105, 206, 94, 207, 1, 81, 177,
            31, 234, 190, 156, 123, 93, 125, 10, 65, 141, 175, 199, 140, 162, 136, 131, 244, 81,
            83, 79, 87, 9, 66, 48, 129, 127, 157, 87, 105, 189, 149, 186, 26, 20, 63, 198, 222, 94,
            49, 2, 129, 129, 0, 243, 33, 60, 82, 189, 78, 48, 104, 168, 181, 202, 9, 229, 45, 245,
            100, 168, 226, 244, 75, 187, 199, 142, 18, 250, 45, 231, 132, 83, 133, 80, 128, 247,
            249, 216, 20, 80, 245, 243, 164, 175, 4, 172, 145, 204, 229, 175, 114, 93, 204, 153,
            66, 198, 182, 168, 1, 165, 51, 100, 133, 22, 121, 155, 44, 38, 245, 96, 52, 207, 120,
            72, 48, 179, 251, 17, 59, 205, 76, 0, 191, 138, 252, 80, 184, 124, 75, 153, 229, 29,
            168, 165, 77, 144, 212, 41, 204, 9, 137, 154, 166, 2, 135, 89, 39, 25, 208, 82, 20, 76,
            245, 14, 58, 9, 85, 17, 71, 199, 248, 12, 27, 24, 26, 216, 76, 197, 223, 142, 145, 2,
            129, 129, 0, 201, 179, 5, 34, 16, 74, 254, 62, 83, 131, 189, 101, 29, 51, 181, 119, 15,
            157, 213, 59, 213, 209, 233, 132, 28, 106, 116, 202, 119, 60, 65, 49, 125, 33, 147,
            178, 169, 4, 254, 113, 160, 97, 69, 210, 168, 81, 88, 140, 13, 90, 17, 5, 70, 130, 64,
            60, 70, 71, 178, 67, 253, 102, 58, 4, 51, 208, 17, 252, 213, 167, 228, 218, 4, 142,
            206, 217, 71, 136, 55, 37, 89, 11, 100, 120, 214, 213, 160, 98, 215, 98, 221, 177, 220,
            253, 242, 238, 207, 161, 108, 250, 78, 0, 232, 84, 154, 15, 173, 216, 82, 95, 37, 214,
            4, 154, 26, 174, 98, 25, 92, 43, 195, 141, 247, 172, 18, 12, 162, 135, 2, 129, 129, 0,
            190, 169, 119, 166, 226, 241, 168, 32, 202, 253, 20, 157, 193, 237, 210, 156, 199, 156,
            131, 59, 200, 220, 107, 92, 18, 121, 97, 47, 114, 87, 255, 147, 195, 227, 88, 66, 70,
            99, 58, 88, 17, 48, 55, 44, 119, 100, 63, 188, 14, 54, 222, 145, 113, 71, 216, 100,
            193, 234, 149, 143, 144, 218, 120, 135, 157, 93, 155, 190, 142, 92, 163, 48, 30, 84,
            107, 101, 92, 79, 151, 222, 157, 221, 212, 103, 120, 129, 201, 3, 213, 200, 101, 41,
            120, 196, 8, 171, 11, 103, 175, 177, 52, 22, 116, 33, 167, 170, 168, 83, 103, 46, 93,
            163, 193, 161, 198, 85, 102, 73, 237, 36, 106, 56, 211, 27, 17, 169, 137, 33, 2, 129,
            128, 40, 193, 13, 86, 118, 168, 80, 122, 211, 113, 25, 1, 167, 70, 221, 113, 179, 44,
            22, 251, 194, 22, 105, 242, 145, 179, 72, 233, 231, 241, 186, 210, 127, 16, 27, 193,
            203, 185, 0, 152, 128, 233, 102, 172, 75, 234, 51, 212, 8, 150, 156, 61, 206, 163, 94,
            203, 79, 0, 9, 155, 7, 70, 114, 142, 138, 209, 141, 240, 226, 82, 204, 64, 233, 14,
            217, 232, 185, 53, 98, 191, 31, 32, 216, 42, 58, 110, 107, 187, 204, 253, 99, 2, 31,
            63, 8, 169, 12, 54, 247, 200, 19, 158, 199, 82, 224, 214, 46, 48, 57, 100, 148, 70,
            140, 35, 127, 36, 161, 25, 178, 175, 253, 17, 96, 107, 218, 49, 199, 93, 2, 129, 128,
            122, 254, 238, 22, 221, 153, 158, 56, 73, 156, 136, 73, 21, 108, 74, 140, 229, 0, 155,
            134, 174, 239, 77, 131, 172, 97, 124, 246, 89, 207, 110, 20, 179, 205, 148, 132, 165,
            192, 71, 32, 119, 164, 250, 59, 194, 33, 167, 180, 178, 204, 158, 140, 8, 218, 157, 20,
            80, 234, 123, 180, 227, 78, 49, 92, 207, 37, 134, 73, 81, 35, 31, 97, 5, 99, 235, 56,
            74, 89, 3, 179, 125, 27, 31, 234, 104, 150, 238, 45, 24, 85, 156, 48, 177, 161, 19,
            124, 122, 43, 156, 253, 219, 220, 25, 178, 136, 248, 211, 151, 19, 198, 129, 239, 28,
            97, 81, 0, 93, 200, 46, 237, 92, 96, 16, 138, 17, 203, 39, 237,
        ])
        .unwrap();

        let jwec = JweCompact::from_str("eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.GBxS4SdM29dvIiVaG8ywUqkcvj-n6sd_ypBlpoAZA3bISTeLSA7o5Alf6XXokdQrzb6FwmJ8Fzkdo9l4Q7Bq6Wg6emFyg52_ME_TejQdX9ComlOxsJYYd_-DbMYtTkivV9kgGEKTBRQA1IAKLkVn2cYrubp0aYtuPxXnXkbNjpuGYDHnjh_CDYaoRjjlbfO3mB3D0B3gcYYWE06dZO6uFjVpyQJuBsA4mydqZ73FtRT14SqMO1Szdt43KZvFl339QPr6mJTt1DtGMj5fNFiufI01GzDTqTvm9oWJk7V-BEX2BdMzjUepi9qce6IkWFDji36-Cl-tkghd6pjzkbTNka_Ue4z0ON2PEisftuarS1td1ACTZI1gfe4d4lW8Gn7eAodkPosE.Og3wmuWteE9ImPIP.HA.W5OXFtOnLYvIOQRxwdyb2Q").unwrap();

        let _session_key = MsOapxbcSessionKey::complete_rsa_oaep_key_agreement(rsa_priv_key, &jwec)
            .expect("Failed to fetch the session key");
    }

    #[test]
    fn ms_oapxbc_3_2_5_1_3_prt_request_response_2() {
        let _ = tracing_subscriber::fmt::try_init();

        let rsa_priv_key = Rsa::private_key_from_der(&[
            48, 130, 4, 164, 2, 1, 0, 2, 130, 1, 1, 0, 193, 113, 18, 242, 196, 25, 226, 133, 221,
            79, 52, 236, 79, 85, 17, 148, 159, 150, 122, 53, 217, 91, 219, 195, 235, 3, 206, 241,
            123, 42, 229, 65, 225, 218, 4, 51, 195, 242, 139, 48, 159, 194, 102, 228, 182, 149,
            217, 124, 107, 219, 117, 161, 184, 87, 132, 228, 143, 8, 179, 200, 252, 91, 90, 96, 73,
            76, 178, 69, 100, 65, 99, 53, 20, 191, 96, 115, 81, 228, 61, 71, 117, 5, 106, 210, 114,
            122, 11, 37, 255, 135, 162, 205, 111, 218, 237, 255, 40, 34, 52, 231, 131, 21, 142,
            194, 218, 248, 165, 78, 221, 38, 159, 194, 233, 133, 234, 45, 218, 95, 218, 108, 85,
            182, 119, 80, 138, 90, 63, 186, 200, 96, 25, 213, 123, 9, 158, 199, 37, 18, 227, 96,
            124, 129, 168, 166, 43, 237, 42, 11, 39, 194, 132, 76, 131, 142, 100, 113, 28, 119, 96,
            95, 95, 95, 36, 63, 158, 56, 10, 188, 141, 151, 202, 101, 19, 80, 230, 79, 166, 1, 166,
            50, 66, 103, 33, 27, 112, 114, 69, 220, 98, 47, 37, 165, 103, 31, 135, 223, 84, 220,
            120, 68, 82, 48, 204, 247, 157, 128, 29, 112, 77, 254, 194, 81, 252, 168, 13, 80, 4,
            209, 52, 231, 126, 210, 56, 215, 11, 90, 30, 49, 76, 145, 183, 2, 243, 176, 189, 147,
            153, 142, 146, 36, 223, 6, 98, 9, 126, 138, 78, 143, 240, 93, 104, 207, 211, 199, 93,
            165, 2, 3, 1, 0, 1, 2, 130, 1, 0, 57, 99, 133, 126, 150, 101, 35, 138, 25, 93, 45, 83,
            74, 57, 239, 172, 75, 40, 70, 123, 129, 79, 186, 68, 70, 141, 235, 176, 66, 157, 56,
            68, 178, 111, 142, 189, 152, 205, 117, 51, 232, 193, 176, 234, 251, 172, 59, 72, 169,
            107, 3, 92, 6, 39, 152, 218, 130, 0, 207, 237, 185, 200, 148, 104, 106, 118, 161, 144,
            234, 172, 103, 117, 81, 1, 113, 232, 228, 139, 181, 14, 101, 14, 69, 97, 199, 234, 163,
            50, 19, 188, 54, 181, 130, 16, 206, 120, 219, 124, 66, 123, 200, 172, 245, 156, 163,
            128, 14, 242, 245, 179, 70, 196, 121, 169, 108, 15, 76, 113, 17, 137, 0, 104, 208, 191,
            9, 60, 187, 24, 246, 241, 86, 151, 220, 216, 182, 96, 16, 199, 50, 97, 122, 19, 197,
            93, 254, 226, 44, 73, 131, 40, 55, 255, 204, 66, 152, 213, 45, 137, 138, 228, 73, 51,
            95, 169, 39, 189, 36, 111, 254, 113, 221, 109, 123, 167, 250, 201, 8, 93, 65, 162, 6,
            236, 184, 255, 88, 207, 110, 236, 200, 118, 21, 172, 22, 69, 2, 185, 251, 41, 252, 154,
            255, 196, 86, 159, 19, 20, 197, 65, 136, 88, 136, 81, 90, 116, 67, 63, 18, 192, 154,
            144, 183, 255, 238, 93, 250, 122, 234, 218, 198, 92, 112, 111, 48, 158, 58, 84, 190,
            232, 73, 84, 32, 127, 10, 148, 229, 157, 225, 150, 105, 102, 107, 6, 163, 202, 38, 165,
            2, 129, 129, 0, 250, 103, 61, 94, 158, 237, 148, 52, 89, 186, 105, 18, 64, 223, 245,
            153, 111, 83, 4, 177, 247, 201, 204, 93, 244, 69, 225, 211, 196, 224, 89, 158, 35, 213,
            148, 243, 173, 141, 149, 202, 119, 156, 64, 225, 40, 35, 97, 124, 23, 83, 128, 65, 29,
            147, 127, 187, 59, 31, 241, 44, 51, 105, 105, 183, 114, 165, 44, 110, 104, 170, 123,
            186, 54, 139, 116, 94, 178, 168, 66, 129, 248, 177, 187, 240, 30, 55, 83, 18, 122, 107,
            196, 204, 113, 42, 86, 3, 70, 46, 149, 221, 229, 64, 173, 181, 119, 123, 230, 85, 216,
            240, 40, 191, 55, 174, 11, 104, 244, 158, 76, 169, 167, 102, 86, 112, 110, 132, 86, 31,
            2, 129, 129, 0, 197, 195, 233, 46, 64, 188, 40, 149, 78, 160, 147, 147, 167, 165, 222,
            14, 36, 107, 86, 7, 160, 134, 35, 206, 109, 247, 96, 54, 136, 32, 69, 52, 233, 246, 3,
            255, 206, 22, 16, 221, 35, 163, 102, 168, 146, 217, 123, 179, 163, 170, 6, 238, 64,
            197, 10, 238, 169, 72, 151, 72, 81, 153, 156, 90, 128, 129, 35, 89, 225, 226, 219, 145,
            253, 108, 131, 118, 112, 13, 122, 139, 251, 182, 190, 166, 211, 108, 196, 173, 90, 40,
            97, 57, 26, 255, 142, 231, 103, 91, 214, 50, 154, 62, 20, 57, 6, 0, 230, 27, 84, 224,
            21, 133, 18, 92, 154, 118, 116, 148, 228, 214, 56, 201, 22, 139, 180, 50, 235, 187, 2,
            129, 129, 0, 230, 254, 96, 29, 174, 140, 202, 32, 52, 250, 2, 189, 164, 253, 53, 74,
            146, 232, 201, 183, 7, 55, 176, 128, 167, 187, 227, 164, 128, 196, 217, 199, 73, 149,
            88, 240, 38, 21, 43, 174, 120, 2, 187, 211, 57, 60, 210, 76, 48, 20, 134, 135, 11, 42,
            171, 53, 100, 72, 134, 41, 217, 79, 144, 7, 124, 10, 37, 95, 192, 204, 44, 145, 78,
            137, 253, 18, 242, 202, 199, 119, 176, 156, 253, 27, 120, 52, 95, 60, 247, 147, 253,
            26, 255, 246, 39, 28, 164, 28, 139, 130, 4, 95, 83, 31, 201, 22, 146, 24, 117, 164,
            174, 98, 31, 146, 61, 210, 87, 126, 196, 135, 232, 246, 62, 29, 63, 198, 114, 207, 2,
            129, 129, 0, 169, 1, 230, 217, 191, 58, 205, 151, 227, 108, 249, 17, 123, 121, 21, 142,
            146, 115, 36, 63, 58, 96, 200, 98, 214, 185, 76, 128, 237, 206, 94, 54, 125, 38, 224,
            126, 16, 217, 236, 169, 127, 150, 89, 218, 0, 61, 90, 40, 199, 218, 59, 56, 11, 36, 25,
            86, 162, 86, 197, 234, 104, 201, 212, 195, 199, 4, 21, 120, 239, 192, 214, 146, 41,
            184, 61, 148, 206, 231, 197, 237, 177, 60, 152, 43, 171, 141, 77, 123, 52, 12, 68, 33,
            240, 63, 172, 25, 119, 204, 20, 254, 131, 176, 63, 202, 7, 166, 102, 255, 190, 134, 13,
            253, 254, 22, 35, 110, 205, 236, 156, 175, 178, 49, 175, 81, 206, 186, 161, 151, 2,
            129, 128, 71, 172, 150, 230, 165, 222, 70, 249, 130, 52, 121, 185, 244, 183, 120, 153,
            25, 185, 211, 138, 163, 128, 12, 92, 44, 177, 204, 190, 179, 51, 84, 197, 150, 68, 153,
            50, 239, 23, 247, 150, 94, 78, 24, 54, 202, 181, 118, 242, 151, 144, 123, 227, 90, 240,
            223, 228, 59, 143, 250, 152, 49, 124, 161, 161, 165, 161, 175, 206, 111, 118, 229, 118,
            209, 163, 64, 101, 196, 212, 46, 197, 67, 244, 150, 10, 203, 237, 8, 225, 238, 109,
            251, 238, 197, 50, 122, 49, 218, 194, 199, 173, 244, 226, 248, 96, 136, 148, 76, 249,
            94, 76, 61, 215, 200, 192, 232, 223, 84, 156, 239, 233, 53, 162, 125, 183, 120, 45, 3,
            75,
        ])
        .unwrap();

        let jwec = JweCompact::from_str("eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.JDWzWlET2sYjG912Kf5iUbtEGq3IUuyxRu-jyTS8nk-wO0Sv2b38BV9FeY_05k76A_uSINUvOUN4kYHTy7KVwd6qW3LAnHs31gua42pu6psDySyPBrSR6X0SYMnRWZ_vtz_wUCdth3nBbYk5nUjk-Sl8nZHwcDE0OZQM9EAa8RlhfdnX5OgN6KJsWT2rh8ncD_ntP71Igx8NLhxsN2rVSNfgCTfGdkyk2juEApdHYUfyPvtBF0WneW4G0I2aefnouBsqVFBD9i6RMVc82XHz2qC05ZCtayTbTUMOoTFlWFF4DguaF5-ySIIBK_BYbuOK27GEhbx0_9GjrWeHLeTjJz4llS3UTWV5RuX-J5SdbXenVqEQpQYUY3vYhgUeE_CiILvXf6K0.LuPdufVtGnScmP4R.YQ.ohRZnXQKpikQhdS8KqgjNw").unwrap();

        let _session_key = MsOapxbcSessionKey::complete_rsa_oaep_key_agreement(rsa_priv_key, &jwec)
            .expect("Failed to fetch the session key");
    }

    #[test]
    fn ms_oapxbc_3_2_5_1_3_prt_request_response_3() {
        let _ = tracing_subscriber::fmt::try_init();

        let rsa_priv_key = Rsa::private_key_from_der(&[
            48, 130, 4, 163, 2, 1, 0, 2, 130, 1, 1, 0, 197, 45, 22, 93, 33, 164, 20, 14, 127, 208,
            131, 124, 163, 150, 151, 122, 222, 97, 21, 108, 219, 77, 43, 228, 151, 85, 233, 171,
            206, 45, 45, 154, 12, 112, 217, 252, 5, 226, 125, 227, 151, 172, 23, 100, 168, 213,
            182, 119, 127, 94, 2, 35, 239, 88, 72, 182, 248, 59, 153, 37, 14, 75, 177, 30, 251, 55,
            114, 195, 75, 144, 219, 146, 202, 4, 26, 96, 189, 155, 20, 92, 119, 21, 70, 228, 217,
            93, 114, 135, 15, 207, 142, 84, 35, 203, 242, 94, 178, 142, 51, 153, 91, 115, 14, 217,
            11, 31, 132, 22, 189, 216, 142, 59, 52, 135, 107, 10, 39, 43, 93, 173, 99, 119, 6, 254,
            146, 128, 202, 125, 142, 238, 234, 191, 6, 102, 20, 65, 167, 154, 226, 88, 42, 179,
            141, 99, 171, 173, 39, 218, 42, 230, 161, 250, 18, 74, 140, 195, 241, 126, 245, 107,
            175, 149, 106, 152, 181, 78, 70, 84, 184, 180, 133, 72, 211, 0, 35, 214, 203, 71, 168,
            39, 28, 59, 208, 188, 176, 123, 173, 62, 159, 219, 118, 96, 242, 182, 25, 121, 232,
            120, 224, 250, 78, 116, 245, 182, 89, 199, 202, 95, 255, 30, 32, 185, 144, 236, 105,
            33, 141, 239, 177, 196, 92, 187, 152, 187, 51, 253, 87, 251, 75, 210, 169, 144, 113,
            251, 86, 61, 188, 28, 156, 104, 1, 226, 27, 185, 112, 0, 156, 145, 192, 28, 127, 210,
            53, 86, 224, 203, 2, 3, 1, 0, 1, 2, 130, 1, 0, 75, 109, 25, 246, 250, 93, 119, 198,
            172, 34, 41, 138, 78, 81, 215, 20, 139, 104, 251, 247, 46, 84, 241, 11, 122, 208, 196,
            152, 146, 64, 58, 7, 137, 230, 201, 156, 92, 235, 237, 88, 88, 182, 222, 36, 5, 105,
            235, 104, 254, 242, 9, 67, 145, 213, 101, 203, 136, 93, 212, 17, 150, 204, 97, 175, 6,
            78, 137, 186, 39, 119, 252, 102, 196, 156, 153, 50, 148, 149, 116, 78, 130, 199, 66,
            221, 92, 65, 33, 4, 133, 137, 210, 90, 97, 111, 45, 2, 8, 175, 217, 17, 59, 40, 98,
            111, 168, 143, 159, 201, 203, 73, 193, 238, 232, 3, 61, 113, 30, 214, 185, 249, 15,
            233, 130, 101, 115, 201, 140, 171, 154, 177, 220, 153, 110, 184, 192, 49, 236, 179,
            221, 113, 43, 174, 119, 234, 75, 253, 51, 56, 210, 39, 231, 41, 243, 218, 183, 68, 244,
            6, 84, 136, 114, 218, 134, 75, 42, 139, 230, 85, 206, 82, 8, 36, 249, 41, 61, 37, 128,
            2, 107, 6, 153, 233, 216, 187, 10, 167, 29, 29, 158, 66, 124, 246, 98, 30, 18, 63, 96,
            178, 241, 230, 230, 30, 43, 218, 227, 11, 170, 1, 98, 123, 201, 164, 208, 77, 127, 132,
            101, 78, 236, 97, 255, 143, 76, 20, 150, 25, 137, 238, 173, 95, 16, 205, 21, 201, 61,
            61, 128, 255, 47, 176, 93, 168, 22, 186, 2, 181, 2, 85, 23, 222, 170, 173, 110, 145,
            116, 225, 2, 129, 129, 0, 244, 203, 140, 23, 175, 4, 119, 102, 235, 79, 224, 3, 171,
            129, 214, 175, 139, 227, 3, 70, 68, 186, 82, 136, 84, 10, 89, 104, 78, 7, 184, 171, 11,
            46, 254, 250, 55, 226, 189, 35, 48, 131, 152, 157, 144, 165, 208, 20, 49, 192, 32, 199,
            208, 79, 124, 235, 252, 11, 96, 53, 182, 36, 212, 83, 96, 111, 84, 234, 250, 234, 109,
            197, 65, 107, 24, 156, 224, 195, 159, 215, 104, 91, 162, 254, 57, 116, 55, 30, 254,
            155, 250, 97, 183, 113, 112, 7, 102, 131, 231, 158, 64, 240, 249, 254, 50, 101, 12, 20,
            153, 32, 186, 179, 175, 5, 95, 80, 37, 205, 166, 51, 133, 172, 209, 253, 84, 189, 226,
            243, 2, 129, 129, 0, 206, 51, 141, 68, 8, 56, 120, 199, 229, 130, 38, 51, 207, 18, 78,
            185, 38, 47, 229, 188, 139, 255, 187, 248, 254, 58, 136, 50, 157, 198, 110, 105, 176,
            39, 87, 207, 231, 145, 37, 78, 249, 153, 197, 62, 32, 114, 228, 135, 171, 8, 88, 104,
            231, 248, 37, 72, 115, 58, 31, 29, 233, 250, 82, 122, 17, 24, 244, 168, 224, 45, 27,
            215, 11, 100, 206, 134, 248, 125, 103, 218, 65, 55, 141, 173, 6, 156, 198, 66, 163, 99,
            160, 254, 21, 148, 222, 140, 93, 69, 39, 251, 151, 137, 64, 214, 85, 1, 221, 217, 213,
            26, 203, 119, 240, 170, 42, 72, 247, 95, 199, 163, 190, 214, 254, 18, 96, 205, 144,
            201, 2, 129, 129, 0, 188, 211, 154, 47, 214, 176, 82, 78, 80, 107, 95, 184, 84, 254,
            165, 148, 234, 9, 229, 199, 185, 82, 36, 65, 198, 217, 232, 215, 157, 129, 53, 64, 179,
            50, 192, 58, 81, 11, 148, 171, 229, 75, 77, 89, 21, 111, 226, 15, 1, 197, 91, 67, 230,
            122, 186, 56, 234, 69, 248, 35, 214, 105, 152, 98, 236, 59, 84, 188, 161, 106, 93, 220,
            79, 183, 5, 216, 85, 68, 113, 50, 222, 235, 248, 209, 179, 141, 226, 203, 4, 201, 90,
            157, 47, 188, 208, 22, 213, 76, 32, 73, 33, 125, 0, 201, 197, 35, 206, 234, 192, 167,
            207, 124, 181, 32, 38, 194, 147, 54, 139, 226, 168, 85, 131, 241, 175, 1, 126, 99, 2,
            129, 128, 50, 172, 196, 168, 213, 132, 91, 90, 116, 242, 217, 68, 158, 61, 23, 143,
            180, 236, 204, 126, 219, 193, 11, 135, 19, 163, 122, 217, 69, 161, 0, 125, 132, 199, 6,
            115, 151, 171, 58, 10, 0, 153, 99, 185, 242, 235, 137, 114, 53, 252, 37, 14, 19, 4, 14,
            213, 145, 75, 213, 93, 218, 164, 164, 36, 79, 147, 92, 125, 44, 42, 169, 206, 221, 131,
            246, 165, 128, 232, 0, 223, 200, 107, 72, 172, 31, 21, 228, 59, 120, 64, 1, 206, 175,
            171, 24, 78, 82, 149, 174, 79, 204, 91, 244, 205, 55, 178, 239, 188, 154, 252, 172,
            200, 91, 34, 214, 165, 123, 245, 211, 240, 79, 244, 50, 24, 126, 37, 198, 209, 2, 129,
            128, 61, 249, 236, 127, 67, 213, 213, 65, 128, 160, 76, 156, 97, 247, 25, 188, 62, 231,
            158, 243, 74, 152, 66, 21, 16, 186, 120, 0, 171, 155, 153, 254, 15, 151, 224, 54, 38,
            122, 200, 46, 131, 210, 217, 24, 79, 177, 164, 234, 88, 199, 87, 186, 242, 225, 211,
            153, 246, 14, 127, 148, 13, 171, 206, 7, 145, 80, 41, 201, 167, 119, 32, 55, 141, 167,
            119, 79, 197, 37, 72, 57, 65, 165, 119, 135, 125, 101, 45, 190, 248, 213, 221, 12, 139,
            89, 0, 232, 159, 191, 5, 211, 227, 190, 192, 241, 157, 246, 176, 56, 174, 40, 143, 195,
            73, 67, 234, 42, 85, 178, 46, 20, 188, 144, 250, 152, 145, 132, 240, 31,
        ])
        .unwrap();

        let jwec = JweCompact::from_str("eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.DodRwhNl9kUhAcSC7bsOw2LnDRw3kWNGnLUkquGEFeWiXpujGrkKEdhLybXEtZcTPGJQ_hrJAASgzI8ZJrgub69Mk9Ox7ArVxea7S3xnsvOM_NvgN_6pQHvtRjXGPX-RURIYp-2zUzGdHRED1z5ZJp5mJW2ADFSwH8ktwVT5C8ReYaIsTm8Z4MmaUBIB9shxLtpvb820y_4fYhI-pV5hdMN4Mcrirdt3LLl6Eo3a93ymhMVjKHX9wHhmAVCRnPp_mtem1pvPlCJfggtECvNUhRSeuFRmECIa8XvtQAMJZ2IpW6fuRAQ6NW9zep6mI8ToJv8LoMPIS1E1I-0u0XkNz5Iao81iwPRGPsHMcJHAb_OPVHgWeO1gSW7LYfyWV166e0X_783C.59ZDhqBR-T4x8tZs.bw.mOP5LbnwYUeAy7VuEzwrYg").unwrap();

        let _session_key = MsOapxbcSessionKey::complete_rsa_oaep_key_agreement(rsa_priv_key, &jwec)
            .expect("Failed to fetch the session key");
    }

    #[test]
    fn ms_oapxbc_3_2_5_1_3_prt_request_response_4() {
        let _ = tracing_subscriber::fmt::try_init();

        let rsa_priv_key = Rsa::private_key_from_der(&[
            48, 130, 4, 164, 2, 1, 0, 2, 130, 1, 1, 0, 198, 57, 5, 146, 186, 206, 80, 37, 24, 237,
            166, 235, 220, 26, 6, 212, 134, 247, 88, 153, 175, 209, 55, 52, 140, 87, 48, 253, 170,
            226, 178, 156, 188, 203, 189, 144, 76, 146, 246, 196, 157, 129, 167, 94, 117, 16, 247,
            124, 240, 59, 26, 186, 120, 46, 152, 115, 104, 96, 78, 144, 248, 231, 182, 81, 87, 48,
            54, 187, 15, 202, 100, 89, 205, 190, 208, 165, 100, 126, 184, 37, 73, 213, 121, 145,
            103, 4, 13, 111, 154, 151, 225, 87, 131, 3, 255, 110, 48, 31, 250, 112, 59, 180, 243,
            46, 200, 53, 185, 96, 14, 9, 206, 29, 2, 39, 141, 192, 173, 135, 215, 91, 76, 198, 221,
            82, 94, 125, 157, 184, 143, 108, 25, 200, 177, 43, 77, 172, 42, 148, 35, 28, 220, 148,
            40, 252, 151, 146, 92, 14, 198, 93, 104, 201, 128, 69, 122, 74, 37, 26, 131, 158, 131,
            66, 131, 133, 53, 63, 62, 178, 166, 146, 31, 149, 52, 196, 111, 61, 143, 67, 10, 193,
            187, 80, 151, 18, 100, 235, 213, 121, 240, 213, 215, 230, 201, 42, 2, 91, 225, 217,
            210, 142, 132, 247, 18, 142, 173, 134, 37, 220, 194, 200, 41, 154, 67, 219, 9, 33, 119,
            172, 51, 209, 198, 174, 118, 179, 63, 7, 238, 43, 109, 42, 108, 252, 248, 249, 83, 249,
            49, 141, 212, 138, 107, 211, 1, 16, 199, 253, 146, 179, 72, 19, 253, 44, 115, 14, 111,
            73, 2, 3, 1, 0, 1, 2, 130, 1, 0, 7, 80, 63, 70, 100, 162, 12, 14, 242, 86, 130, 92, 29,
            104, 208, 107, 178, 247, 25, 75, 194, 82, 227, 200, 138, 141, 4, 255, 182, 248, 90, 66,
            178, 44, 138, 55, 242, 187, 81, 99, 123, 180, 54, 234, 163, 67, 22, 254, 131, 22, 139,
            43, 234, 23, 62, 4, 180, 11, 41, 154, 235, 180, 16, 227, 251, 101, 137, 255, 104, 219,
            188, 204, 27, 109, 56, 225, 129, 77, 179, 153, 156, 153, 197, 188, 121, 162, 138, 164,
            93, 125, 209, 16, 155, 130, 224, 63, 190, 130, 207, 136, 168, 139, 74, 149, 165, 73,
            102, 39, 135, 29, 17, 127, 188, 126, 157, 26, 72, 204, 196, 67, 88, 23, 214, 62, 157,
            193, 224, 185, 199, 202, 251, 36, 183, 163, 221, 78, 76, 107, 9, 164, 131, 28, 18, 129,
            33, 16, 243, 121, 156, 126, 86, 106, 61, 93, 184, 171, 191, 197, 47, 31, 142, 47, 196,
            75, 240, 161, 12, 176, 15, 188, 12, 186, 244, 151, 176, 193, 55, 180, 115, 50, 243,
            111, 246, 167, 66, 213, 97, 125, 85, 79, 254, 255, 179, 107, 211, 106, 114, 200, 95,
            63, 182, 136, 246, 146, 46, 218, 89, 252, 13, 84, 203, 91, 69, 8, 77, 173, 255, 17,
            174, 227, 122, 126, 7, 1, 65, 48, 141, 92, 57, 128, 207, 142, 141, 153, 140, 24, 78, 4,
            248, 195, 186, 120, 168, 127, 96, 227, 141, 91, 50, 217, 191, 110, 84, 197, 247, 233,
            2, 129, 129, 0, 249, 164, 98, 233, 84, 195, 5, 54, 202, 175, 143, 127, 94, 140, 149,
            66, 167, 101, 30, 222, 84, 173, 37, 2, 139, 165, 54, 67, 232, 228, 133, 16, 96, 139,
            234, 201, 54, 169, 151, 126, 97, 49, 216, 78, 88, 21, 230, 194, 36, 45, 33, 195, 233,
            159, 255, 196, 251, 55, 236, 85, 184, 19, 17, 53, 18, 141, 50, 53, 213, 67, 166, 99,
            29, 106, 52, 217, 168, 29, 227, 76, 137, 190, 164, 94, 207, 95, 21, 199, 172, 77, 2,
            20, 163, 51, 206, 187, 33, 156, 171, 144, 11, 91, 167, 18, 46, 58, 11, 21, 109, 100,
            31, 181, 60, 115, 126, 137, 117, 122, 240, 47, 131, 238, 163, 133, 97, 166, 207, 215,
            2, 129, 129, 0, 203, 69, 100, 82, 228, 19, 15, 177, 138, 25, 183, 223, 13, 190, 36,
            110, 208, 104, 12, 1, 58, 109, 174, 57, 82, 56, 183, 231, 178, 122, 75, 32, 242, 184,
            7, 21, 173, 43, 109, 234, 83, 195, 83, 115, 156, 170, 148, 62, 99, 19, 15, 205, 229,
            181, 115, 153, 123, 216, 75, 243, 111, 118, 77, 155, 165, 185, 25, 43, 244, 254, 251,
            171, 190, 183, 187, 180, 222, 208, 35, 100, 227, 48, 213, 13, 173, 70, 240, 90, 198,
            28, 181, 244, 228, 164, 162, 138, 50, 211, 97, 112, 132, 162, 212, 98, 24, 6, 10, 58,
            145, 216, 25, 249, 13, 7, 136, 116, 30, 82, 138, 238, 118, 194, 57, 63, 74, 139, 85,
            223, 2, 129, 129, 0, 162, 152, 67, 232, 15, 81, 250, 10, 102, 215, 19, 210, 116, 133,
            130, 13, 232, 179, 62, 248, 182, 20, 19, 191, 229, 174, 84, 122, 196, 172, 90, 82, 129,
            95, 128, 43, 79, 212, 3, 156, 199, 183, 76, 88, 50, 157, 9, 48, 55, 153, 193, 157, 53,
            132, 5, 117, 137, 222, 49, 170, 222, 250, 100, 65, 185, 244, 134, 216, 115, 47, 221,
            166, 62, 153, 87, 20, 208, 159, 174, 212, 193, 254, 142, 86, 70, 32, 123, 50, 18, 242,
            17, 65, 217, 206, 59, 126, 188, 116, 171, 117, 101, 64, 107, 191, 182, 166, 13, 100, 6,
            92, 169, 30, 68, 226, 64, 111, 77, 58, 38, 71, 252, 89, 40, 222, 13, 237, 52, 255, 2,
            129, 128, 12, 84, 54, 36, 140, 238, 215, 9, 214, 173, 126, 168, 137, 197, 217, 161,
            219, 4, 36, 142, 66, 131, 250, 136, 65, 131, 109, 44, 33, 120, 39, 108, 101, 44, 98,
            73, 159, 74, 62, 13, 115, 109, 42, 119, 157, 173, 254, 245, 213, 190, 135, 59, 222,
            205, 229, 168, 14, 137, 236, 249, 99, 238, 82, 0, 185, 201, 131, 76, 86, 60, 204, 248,
            250, 197, 92, 30, 57, 81, 120, 132, 26, 255, 144, 60, 151, 32, 241, 93, 32, 29, 7, 176,
            69, 217, 242, 125, 221, 93, 82, 208, 167, 74, 213, 4, 234, 30, 27, 170, 183, 195, 218,
            183, 111, 97, 224, 149, 226, 108, 241, 62, 75, 119, 182, 79, 47, 111, 74, 19, 2, 129,
            129, 0, 208, 21, 68, 197, 152, 91, 161, 109, 187, 157, 49, 220, 218, 167, 246, 171,
            119, 113, 108, 124, 33, 98, 11, 12, 64, 248, 30, 115, 65, 166, 0, 33, 250, 68, 98, 136,
            228, 128, 143, 81, 158, 213, 22, 79, 118, 212, 210, 79, 85, 175, 136, 115, 72, 105,
            109, 53, 55, 86, 35, 117, 34, 188, 106, 65, 66, 72, 196, 246, 199, 199, 128, 7, 111,
            104, 118, 186, 40, 93, 248, 166, 135, 81, 37, 210, 169, 185, 13, 24, 151, 65, 16, 226,
            215, 134, 162, 243, 127, 37, 234, 224, 134, 0, 62, 54, 100, 23, 15, 187, 24, 72, 242,
            232, 177, 251, 102, 94, 81, 118, 4, 64, 194, 192, 3, 66, 73, 62, 221, 206,
        ])
        .unwrap();

        let jwec = JweCompact::from_str("eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.Cr8kUpBTUIYM6YQrb7sGycp_O_wESAzSJJCovLPDNP6B2y6mTKvvoUASB_nUDpRD_05X3oQ7gbAxj1VRZPTljy_NEjF5Evgh-YJRscBC0n7oPw2xLU3epcU5Ub2FNEr2n1vZq7XnSFHGGNiP7Xxb5PWUXgfWPtT4VLjRrgNX7cuCGxsxCeOSibgFFmXyBSBOXvM1h0XOaURx0wF9O0UCi8qQ6JnN1SBhPtn3QdRY_x4K71gpfuGykI-Uu2jRa37ttZQmj9Cxd3AMzBQ-lob5LaqqZMdrcTL8HfJIoYz_dSMqHXDcd_Ug3GHEtVJXyqBSxk5TZEnrBHsoiAGLZwSQf8vRD2Kf6Ozn1IMVXdt4G_k0HqQ-XWHf8YKsRz999zeZNJeZqz1T.-8Z8ggNq4rGDY6CC.Ww.OGrxcb43ePPDLj16rsj-1A").unwrap();

        let _session_key = MsOapxbcSessionKey::complete_rsa_oaep_key_agreement(rsa_priv_key, &jwec)
            .expect("Failed to fetch the session key");
    }

    #[test]
    fn ms_oapxbc_3_2_5_1_3_prt_request_response_rsa_alt() {
        use pkcs1::DecodeRsaPrivateKey;
        use rsa::oaep::Oaep;
        use rsa::RsaPrivateKey;

        use base64::{engine::general_purpose, Engine as _};

        let _ = tracing_subscriber::fmt::try_init();

        let rsa_priv_key = RsaPrivateKey::from_pkcs1_der(&[
            48, 130, 4, 164, 2, 1, 0, 2, 130, 1, 1, 0, 198, 57, 5, 146, 186, 206, 80, 37, 24, 237,
            166, 235, 220, 26, 6, 212, 134, 247, 88, 153, 175, 209, 55, 52, 140, 87, 48, 253, 170,
            226, 178, 156, 188, 203, 189, 144, 76, 146, 246, 196, 157, 129, 167, 94, 117, 16, 247,
            124, 240, 59, 26, 186, 120, 46, 152, 115, 104, 96, 78, 144, 248, 231, 182, 81, 87, 48,
            54, 187, 15, 202, 100, 89, 205, 190, 208, 165, 100, 126, 184, 37, 73, 213, 121, 145,
            103, 4, 13, 111, 154, 151, 225, 87, 131, 3, 255, 110, 48, 31, 250, 112, 59, 180, 243,
            46, 200, 53, 185, 96, 14, 9, 206, 29, 2, 39, 141, 192, 173, 135, 215, 91, 76, 198, 221,
            82, 94, 125, 157, 184, 143, 108, 25, 200, 177, 43, 77, 172, 42, 148, 35, 28, 220, 148,
            40, 252, 151, 146, 92, 14, 198, 93, 104, 201, 128, 69, 122, 74, 37, 26, 131, 158, 131,
            66, 131, 133, 53, 63, 62, 178, 166, 146, 31, 149, 52, 196, 111, 61, 143, 67, 10, 193,
            187, 80, 151, 18, 100, 235, 213, 121, 240, 213, 215, 230, 201, 42, 2, 91, 225, 217,
            210, 142, 132, 247, 18, 142, 173, 134, 37, 220, 194, 200, 41, 154, 67, 219, 9, 33, 119,
            172, 51, 209, 198, 174, 118, 179, 63, 7, 238, 43, 109, 42, 108, 252, 248, 249, 83, 249,
            49, 141, 212, 138, 107, 211, 1, 16, 199, 253, 146, 179, 72, 19, 253, 44, 115, 14, 111,
            73, 2, 3, 1, 0, 1, 2, 130, 1, 0, 7, 80, 63, 70, 100, 162, 12, 14, 242, 86, 130, 92, 29,
            104, 208, 107, 178, 247, 25, 75, 194, 82, 227, 200, 138, 141, 4, 255, 182, 248, 90, 66,
            178, 44, 138, 55, 242, 187, 81, 99, 123, 180, 54, 234, 163, 67, 22, 254, 131, 22, 139,
            43, 234, 23, 62, 4, 180, 11, 41, 154, 235, 180, 16, 227, 251, 101, 137, 255, 104, 219,
            188, 204, 27, 109, 56, 225, 129, 77, 179, 153, 156, 153, 197, 188, 121, 162, 138, 164,
            93, 125, 209, 16, 155, 130, 224, 63, 190, 130, 207, 136, 168, 139, 74, 149, 165, 73,
            102, 39, 135, 29, 17, 127, 188, 126, 157, 26, 72, 204, 196, 67, 88, 23, 214, 62, 157,
            193, 224, 185, 199, 202, 251, 36, 183, 163, 221, 78, 76, 107, 9, 164, 131, 28, 18, 129,
            33, 16, 243, 121, 156, 126, 86, 106, 61, 93, 184, 171, 191, 197, 47, 31, 142, 47, 196,
            75, 240, 161, 12, 176, 15, 188, 12, 186, 244, 151, 176, 193, 55, 180, 115, 50, 243,
            111, 246, 167, 66, 213, 97, 125, 85, 79, 254, 255, 179, 107, 211, 106, 114, 200, 95,
            63, 182, 136, 246, 146, 46, 218, 89, 252, 13, 84, 203, 91, 69, 8, 77, 173, 255, 17,
            174, 227, 122, 126, 7, 1, 65, 48, 141, 92, 57, 128, 207, 142, 141, 153, 140, 24, 78, 4,
            248, 195, 186, 120, 168, 127, 96, 227, 141, 91, 50, 217, 191, 110, 84, 197, 247, 233,
            2, 129, 129, 0, 249, 164, 98, 233, 84, 195, 5, 54, 202, 175, 143, 127, 94, 140, 149,
            66, 167, 101, 30, 222, 84, 173, 37, 2, 139, 165, 54, 67, 232, 228, 133, 16, 96, 139,
            234, 201, 54, 169, 151, 126, 97, 49, 216, 78, 88, 21, 230, 194, 36, 45, 33, 195, 233,
            159, 255, 196, 251, 55, 236, 85, 184, 19, 17, 53, 18, 141, 50, 53, 213, 67, 166, 99,
            29, 106, 52, 217, 168, 29, 227, 76, 137, 190, 164, 94, 207, 95, 21, 199, 172, 77, 2,
            20, 163, 51, 206, 187, 33, 156, 171, 144, 11, 91, 167, 18, 46, 58, 11, 21, 109, 100,
            31, 181, 60, 115, 126, 137, 117, 122, 240, 47, 131, 238, 163, 133, 97, 166, 207, 215,
            2, 129, 129, 0, 203, 69, 100, 82, 228, 19, 15, 177, 138, 25, 183, 223, 13, 190, 36,
            110, 208, 104, 12, 1, 58, 109, 174, 57, 82, 56, 183, 231, 178, 122, 75, 32, 242, 184,
            7, 21, 173, 43, 109, 234, 83, 195, 83, 115, 156, 170, 148, 62, 99, 19, 15, 205, 229,
            181, 115, 153, 123, 216, 75, 243, 111, 118, 77, 155, 165, 185, 25, 43, 244, 254, 251,
            171, 190, 183, 187, 180, 222, 208, 35, 100, 227, 48, 213, 13, 173, 70, 240, 90, 198,
            28, 181, 244, 228, 164, 162, 138, 50, 211, 97, 112, 132, 162, 212, 98, 24, 6, 10, 58,
            145, 216, 25, 249, 13, 7, 136, 116, 30, 82, 138, 238, 118, 194, 57, 63, 74, 139, 85,
            223, 2, 129, 129, 0, 162, 152, 67, 232, 15, 81, 250, 10, 102, 215, 19, 210, 116, 133,
            130, 13, 232, 179, 62, 248, 182, 20, 19, 191, 229, 174, 84, 122, 196, 172, 90, 82, 129,
            95, 128, 43, 79, 212, 3, 156, 199, 183, 76, 88, 50, 157, 9, 48, 55, 153, 193, 157, 53,
            132, 5, 117, 137, 222, 49, 170, 222, 250, 100, 65, 185, 244, 134, 216, 115, 47, 221,
            166, 62, 153, 87, 20, 208, 159, 174, 212, 193, 254, 142, 86, 70, 32, 123, 50, 18, 242,
            17, 65, 217, 206, 59, 126, 188, 116, 171, 117, 101, 64, 107, 191, 182, 166, 13, 100, 6,
            92, 169, 30, 68, 226, 64, 111, 77, 58, 38, 71, 252, 89, 40, 222, 13, 237, 52, 255, 2,
            129, 128, 12, 84, 54, 36, 140, 238, 215, 9, 214, 173, 126, 168, 137, 197, 217, 161,
            219, 4, 36, 142, 66, 131, 250, 136, 65, 131, 109, 44, 33, 120, 39, 108, 101, 44, 98,
            73, 159, 74, 62, 13, 115, 109, 42, 119, 157, 173, 254, 245, 213, 190, 135, 59, 222,
            205, 229, 168, 14, 137, 236, 249, 99, 238, 82, 0, 185, 201, 131, 76, 86, 60, 204, 248,
            250, 197, 92, 30, 57, 81, 120, 132, 26, 255, 144, 60, 151, 32, 241, 93, 32, 29, 7, 176,
            69, 217, 242, 125, 221, 93, 82, 208, 167, 74, 213, 4, 234, 30, 27, 170, 183, 195, 218,
            183, 111, 97, 224, 149, 226, 108, 241, 62, 75, 119, 182, 79, 47, 111, 74, 19, 2, 129,
            129, 0, 208, 21, 68, 197, 152, 91, 161, 109, 187, 157, 49, 220, 218, 167, 246, 171,
            119, 113, 108, 124, 33, 98, 11, 12, 64, 248, 30, 115, 65, 166, 0, 33, 250, 68, 98, 136,
            228, 128, 143, 81, 158, 213, 22, 79, 118, 212, 210, 79, 85, 175, 136, 115, 72, 105,
            109, 53, 55, 86, 35, 117, 34, 188, 106, 65, 66, 72, 196, 246, 199, 199, 128, 7, 111,
            104, 118, 186, 40, 93, 248, 166, 135, 81, 37, 210, 169, 185, 13, 24, 151, 65, 16, 226,
            215, 134, 162, 243, 127, 37, 234, 224, 134, 0, 62, 54, 100, 23, 15, 187, 24, 72, 242,
            232, 177, 251, 102, 94, 81, 118, 4, 64, 194, 192, 3, 66, 73, 62, 221, 206,
        ])
        .unwrap();

        let enc_cek = general_purpose::URL_SAFE_NO_PAD
            .decode("Cr8kUpBTUIYM6YQrb7sGycp_O_wESAzSJJCovLPDNP6B2y6mTKvvoUASB_nUDpRD_05X3oQ7gbAxj1VRZPTljy_NEjF5Evgh-YJRscBC0n7oPw2xLU3epcU5Ub2FNEr2n1vZq7XnSFHGGNiP7Xxb5PWUXgfWPtT4VLjRrgNX7cuCGxsxCeOSibgFFmXyBSBOXvM1h0XOaURx0wF9O0UCi8qQ6JnN1SBhPtn3QdRY_x4K71gpfuGykI-Uu2jRa37ttZQmj9Cxd3AMzBQ-lob5LaqqZMdrcTL8HfJIoYz_dSMqHXDcd_Ug3GHEtVJXyqBSxk5TZEnrBHsoiAGLZwSQf8vRD2Kf6Ozn1IMVXdt4G_k0HqQ-XWHf8YKsRz999zeZNJeZqz1T"
            ).unwrap();

        let padding = Oaep::new_with_mgf_hash::<sha1::Sha1, sha1::Sha1>();

        let cek = rsa_priv_key.decrypt(padding, &enc_cek).unwrap();

        trace!(?cek);
    }
}
